{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cassidy Lowe's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Cassidy Lowe </li> </ul>"},{"location":"tutorials/go-setup/#today-we-will-be-learning-how-to-set-up-a-dev-container-for-go","title":"Today we will be learning how to set up a dev container for Go \ud83d\ude0a","text":""},{"location":"tutorials/go-setup/#what-does-this-tutorial-contain","title":"What does this tutorial contain?","text":"<p>We are going to go through prerequisites needed, the steps to install, how to set up a dev container for a Go project, and finally create a Hello World project. </p>"},{"location":"tutorials/go-setup/#notes","title":"Notes:","text":"<p>You will not need to install anything directly to your host machine since we are using a Dev Container. Since we are running Linux in our Dev Container, you should not expect to see a .exe file.</p>"},{"location":"tutorials/go-setup/#what-is-go","title":"What is Go?","text":"<p>Go defines itself as \"An open-source programming language supported by Google\" and is used due to its concurrency support, simplicity, and performance. It is often used for cloud applications, web developement, and networking applications.  </p>"},{"location":"tutorials/go-setup/#prerequisites-for-todays-tutorial","title":"Prerequisites for today's tutorial:","text":"<ul> <li>VSCode installed</li> <li>Docker installed and running</li> <li>Git installed  </li> </ul>"},{"location":"tutorials/go-setup/#step-1-setting-up-a-git-repository","title":"Step 1: Setting up a Git Repository","text":"<p>Go in your terminal and paste the following code </p> <pre><code>mkdir go-project\ncd go-project # (1)\n</code></pre> <ol> <li>This creates a new directory for us to work in! </li> </ol> <p>Next, paste this code in. </p> <pre><code>git init # (1)\n</code></pre> <ol> <li>This initializes Git in this directory</li> </ol> <p>Create a Readme file with the following code </p> <pre><code>echo \"# Go Project ReadMe\" \nThis project follows a tutorial found here https://calowe2.github.io/comp423-course-notes/tutorials/go-setup/ &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\" # (1)\n</code></pre> <ol> <li>Now our project has a readme file!!  </li> </ol>"},{"location":"tutorials/go-setup/#step-2-setting-up-a-remote-repository-on-github","title":"Step 2: Setting up a Remote Repository on GitHub","text":"<ul> <li> <p>Go to GitHub, sign in, and go to create a new repository </p> </li> <li> <p>Fill in these details:</p> <p>Repository Name: go-project</p> <p>Description: \"Setting up my first Go repository.\"</p> <p>Visibility: Public</p> </li> <li> <p>Do not initialize the repository with a README, .gitignore, or license. </p> </li> <li> <p>Click create repository  </p> </li> </ul>"},{"location":"tutorials/go-setup/#step-3-add-the-repo-as-a-remote","title":"Step 3: Add the Repo as a Remote","text":"<ul> <li>Enter this code substituting in your Github username: </li> </ul> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-project.git # (1)\n</code></pre> <ol> <li>Now we have added our Github repo as a remote</li> </ol> <p>Check your default branch name with the subcommand git branch. If it's not main, rename it to main with the following command: </p> <pre><code>git branch -M main.\n</code></pre> <p>Push your local commits to the GitHub repository with the following code:</p> <pre><code>git push --set-upstream origin main # (1)\n</code></pre> <ol> <li>Now we have pushed out local commits to our GitHub repo  </li> </ol>"},{"location":"tutorials/go-setup/#step-4-setting-up-a-dev-container","title":"Step 4: Setting up a Dev Container","text":"<ol> <li> <p>In VS Code, open the go-project directory. You can do this via: File &gt; Open Folder.</p> </li> <li> <p>Install the Dev Containers extension for VS Code.</p> </li> <li> <p>Create a .devcontainer directory in the root of your project with the following file inside of this \"hidden\" configuration directory:</p> </li> </ol> <p>.devcontainer/devcontainer.json</p> <p>Add the following code to your devcontainer.json file:</p> <pre><code>{\n    \"name\": \"Go Project\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n    \"customizations\": {\n        \"vscode\": {\n        \"settings\": {\n        \"go.useLanguageServer\": true\n    },\n    \"extensions\": [\n      \"golang.go\"\n    ]\n  }\n}\n}\n</code></pre>"},{"location":"tutorials/go-setup/#step-5-reopen-the-dev-container","title":"Step 5: Reopen the Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option.  </p> <p>Run the Command </p> <pre><code>go version\n</code></pre> <p>to prove to yourself that you are running a recent version of Go</p>"},{"location":"tutorials/go-setup/#step-6-try-it-out-by-adding-a-hello-world-example","title":"Step 6: Try it Out by Adding a Hello World Example","text":"<p>Enter the following code in the terminal in order to initialize a go.mod file which is needed for all Go projects. </p> <pre><code>go mod init example.com/go-project\n</code></pre> <p>Enter the following code in the terminal to create an empty file called main where we will create our Hello World project. We use nano here so we can immediately edit the file upon creation.</p> <pre><code>touch main.go\n</code></pre> <p>Paste in the following code in your new main.go file to create our Hello World project </p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")}\n</code></pre> <p>Save the file by pressing Ctrl+S!  </p>"},{"location":"tutorials/go-setup/#step-7-compile-and-run-your-project","title":"Step 7: Compile and Run Your Project","text":"<p>Run the following code to compile and run your project!</p> <pre><code>go run main.go\n</code></pre> <p>You could instead use the following code to compile your code.</p> <pre><code>go build main.go\n</code></pre> <p>This command is similar to the command gcc which we learned in 211. This generates an exectuable which can be run with the next command</p> <pre><code>./main\n</code></pre> <p>You should see \"Hello COMP423\" printed using either set of commands!  </p>"},{"location":"tutorials/go-setup/#step-8-lets-save-our-work","title":"Step 8: Let's Save Our Work!","text":"<p>Enter the following code in your terminal to commit</p> <pre><code>git add .\ngit commit -m \"Hello Comp423!\"\n</code></pre> <p>Note: If you get the following error</p> <p>fatal: detected dubious ownership in repository at '/workspaces/go-project' To add an exception for this directory, call:</p> <pre><code>    git config --global --add safe.directory /workspaces/go-project\n</code></pre> <p>Run the code as it says </p> <pre><code>git config --global --add safe.directory /workspaces/go-project\n</code></pre> <p>Then add and commit as stated above ^</p> <p>Finally, run</p> <pre><code>git push origin main # (1)\n</code></pre> <ol> <li>Now our Github has all of our work!</li> </ol>"},{"location":"tutorials/go-setup/#congrats-you-have-set-up-a-project-in-the-go-programming-language","title":"Congrats! You have set up a project in the Go programming language!","text":""}]}